#### TNL Example Script ####
# beginning a line with # makes a comment, obviously
# <name> = <some expression> names an expression so you can use it easily later
#
# most functions take an X,Y,Z and return a value, but in TNL you do not
# normally reference X,Y,Z and the value directly (since those depend
# on which section of map is being generated, which is controlled externally).
# Rather, you chain functions together to specify how X,Y,Z and the result value
# are transformed. e.g.
#   perlin * 2
#     - will double the return value from perlin
#   xf( x * 2, y * 2, z, perlin )
#     - will double the X and Y values that are given to perlin  
#
# Constant numbers can be represented in standard decimal format:
#   23, -4.75 +12.3333
#
# Outputs can be added, subtracted, multiplied, and divided using infix
# operators:
#   2 * 3, perlin * 8 - 2.1, max(0,perlin) - 0.5
#
# Some functions only take constants for certain arguments.  e.g. you may
# pass (4) as the x, y arguments to scale-in, but not (perlin).
#
# Notes about some basic functions:
# x, y, z
#   - the values of the X, Y, and Z inputs 
# perlin
#   - the standard 3-dimensional perlin noise function
# xf( <x-transform>, <y-transform>, <z-transform>, <basis-function> )
#   - transforms X, Y, and Z using the transforms given before passing
#     to <basis-function>, which is an arbitrary expression
# scale-in( <x:const>, <y:const>, <z:const>, <basis-function>
#   - a special case of xf that scales X, Y, and Z by the specified CONSTANT
#     amounts 
# translates-in( <x:const>, <y:const>, <z:const>, <basis-function>
#   - a special case of xf that translates X, Y, and Z by the specified
#     CONSTANT amounts
# min( <a>, <b> )
#   - takes the lower of the outputs of a and b for each point (X,Y,Z) of input
# max( <a>, <b> )
#   - takes the higher of the outputs of a and b for each point (X,Y,Z) of input
# ridge( <min>, <max>, <value> )
#   - 'folds up' the value function so that the output fits between
#     <min> and <max> at every point
# fractal( <iterations>,
#          <initial-xyz-divisor>, <initial-v-scale>,
#          <xyz-iteration-divisor>, <v-iteration-scale>,
#          <z-iteration-offset>, <basis-function> )
#   - documentation pending, see if you can figure it.

# You can name an expression with the syntax "<name> = <expression>;":
coolbase = ridge( -0.4, 0.4, perlin ) * scale-in( 0.1, 0.1, 0.1, perlin );

# continental-height = min(+32,max(-32, translate-in( -2200, 200, 0, fractal( 2, 1024, 32, 2, 2, 1, coolbase ) ))); # + fractal( 4, 20, 20, 10, 2, 11, coolbase ) ))) - 8;
# beach-height = min(4, continental-height + 4);

continental-height = translate-in( 10000, 10000, 0, fractal( 3, 100000, 64, 2, 0.8, 5, perlin - 0.1 ) );

hill-height = beach-height + max(0,min(1,beach-height)) * max(0,fractal( 3, 16, 16, 2, 2, 2, coolbase ));

beach-height = continental-height + 4 + 2 * fractal( 6, 80, 16, 2, 1, 2, coolbase );

dirt-height = beach-height * 2 - 2 + fractal( 2, 8, 8, 2, 2, 2, coolbase );

ground-origin = 64;

regular = layered-terrain(
	layer( materials.water, 0, 64 ),
	layer( materials.sand, 0, ground-origin + beach-height ),
	layer( materials.dirt, 0, ground-origin + hill-height - 2),
	layer( materials.stone, 0, ground-origin + hill-height - 6),
	layer( materials.bedrock, 0, 1 ),
	# would make some lava-bottomed caves:
	# layer( materials.air, 32, 32 + max(0,fractal( 4, 10, 10, 2, 2, 5, perlin )) ), 
	# layer( materials.lava, 30, 35 ),
	tree-populator( tree-types.round, fractal( 4, 100, 0.005, 2, 2, 1, perlin ) ), 
	grassifier,
	lighter,
);

simple-dirt-height = min( 48, fractal( 3, 12, 64, 3, 2, 1, coolbase ) );
simple-sand-height = min( 7, simple-dirt-height * 0.7 + 2 + 2 * fractal( 2, 50, 4, 2, 2, 1, perlin ) );
winterness = scale-in( 0.01, 0.01, 0.1, simplex );

tree-test = layered-terrain(
	layer( materials.water, 0, 64 ),
	layer( materials.sand, 0, 60 + simple-sand-height ),
	layer( materials.dirt, 0, 60 + simple-dirt-height ),    
	layer( materials.bedrock, 0, 1 ),
	# layer( materials.bedrock, 96, 96 + winterness ),
	grassifier,
	tree-populator( tree-types.pine, fractal( 2, 50, 0.01, 2, 2, 3, perlin ) ),
	tree-populator( tree-types.round, fractal( 2, 50, 0.01, 2, 2, -3, perlin ) ),
	winterizer( winterness ),
	lighter,
);

# This final statement, because it is not of the form <name> = <expr>, is
# the 'final value of the script'!  i.e., the reason we are loading this
# script file is to define this, so it does not need a name.
# We can easily switch between several generators by defining them with names
# and then naming the one we want, here:
tree-test
