coolperl = perlin * min(2,max(0.2,scale-in( 0.1, 0.1, 0.1, perlin ) * 2));
sand-height = fractal( 12, 8, 4, 2, 1.4, 1, coolperl );
max-ground = 112 + fractal( 3, 32, 4, 2, 1.5, -5, perlin ); 
min-ground = 32 + fractal( 4, 32, 4, 2, 1.7, -5, perlin );
mountain-height = max(min-ground,min(max-ground,
	32 + fractal(4,48,48,2,1.5,-1,perlin) * max(0.4,fractal(4,512,1.5,1,1,-7,perlin))
));
coal-height = fractal(3,6,3,3,3,-1,perlin);
var-height = fractal(1,5,2,2,1,-23,perlin);

layered-terrain(
	layer( materials.water, 0, 64 ),
	
	# Basic terrain:
	layer( materials.sand, 0, min(max-ground,61 + sand-height) ),
	layer( materials.dirt, 0, min(max-ground,60 + sand-height * 1.2 + fractal(3,16,12,3,1,1,coolperl)) ),
	layer( materials.dirt, 0, min(max-ground,mountain-height + 4 + fractal(4,6,6,3,3,1,coolperl)) ),
	layer( materials.stone, 0, mountain-height ),
	
	# Ores:
	layer( materials.coal-ore, mountain-height + 3 + fractal(2,1,3,3,3,-1,perlin), mountain-height ),
	layer( materials.coal-ore, 64 + coal-height, min(mountain-height, 64 + coal-height + 1 + var-height) ),
	layer( materials.iron-ore, mountain-height - 20 + fractal(2,5,3,3,3,-23,perlin), mountain-height - 21 ),
	layer( materials.gold-ore, 20 + coal-height, 20.5 + coal-height + var-height ),
	layer( materials.diamond-ore, 10 + translate-in(0,0,10,coal-height), 10 + translate-in(0,0,10,coal-height + var-height) ),
	layer( materials.redstone-ore, 3 + translate-in(0,0,20,coal-height ), 3 + translate-in(0,0,20,coal-height + var-height) ),
	
	# Caves:
	layer( materials.air, 36 + fractal(3,5,3,3,3,1,perlin), min(mountain-height - 2,36 + fractal(3,5,5,3,3,-2,perlin)) ),
	layer( materials.air, 56 + fractal(3,5,3,3,3,-3,perlin), min(mountain-height - 2,64 + fractal(3,5,5,3,3,-4,perlin)) ),
	# Cave with lava:
	layer( materials.air,  16 + fractal(3,5,3,3,3,-7,perlin),         min(mountain-height - 2,20 + fractal(3,5,4,3,3,-7,perlin)) ),
	layer( materials.lava, 16 + fractal(3,5,3,3,3,-7,perlin), min(16, min(mountain-height - 2,20 + fractal(3,5,4,3,3,-7,perlin)) )),

	layer( materials.bedrock, 0, max(1,fractal(3,12,12,3,3,1,coolperl)) ),
	
	# Chunk processors:
	grassifier,
	tree-populator( tree-types.pine, fractal( 3, 100, 0.01, 2, 2, 3, perlin ) ),
	tree-populator( tree-types.round, fractal( 3, 50, 0.01, 2, 2, -3, perlin ) ),
	lighter,
	flag-populated,
)
